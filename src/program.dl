#include "rules/fix_broken_null_checks/implementation.dl"
#include "rules/fix_calls_to_thread_run/implementation.dl"
#include "rules/fix_imprecise_calls_to_bigdecimal/implementation.dl"
#include "rules/fix_inefficient_calls_to_foreach_list_add/implementation.dl"
#include "rules/fix_inefficient_map_access/implementation.dl"
#include "rules/fix_null_returns_in_tostring/implementation.dl"
#include "rules/fix_potential_resource_leaks/implementation.dl"
#include "rules/fix_raw_use_of_empty_collections/implementation.dl"
#include "rules/fix_raw_use_of_generic_class/implementation.dl"
#include "rules/remove_empty_declarations/implementation.dl"
#include "rules/remove_empty_finally_blocks/implementation.dl"
#include "rules/remove_empty_if_statements/implementation.dl"
#include "rules/remove_empty_nested_blocks/implementation.dl"
#include "rules/remove_empty_statements/implementation.dl"
#include "rules/remove_empty_try_blocks/implementation.dl"
#include "rules/remove_redundant_calls_to_close/implementation.dl"
#include "rules/remove_redundant_calls_to_collection_addall/implementation.dl"
#include "rules/remove_redundant_casts/implementation.dl"
#include "rules/remove_redundant_collection_copies/implementation.dl"
#include "rules/remove_redundant_try_blocks/implementation.dl"
#include "rules/remove_repeated_unary_operators/implementation.dl"
#include "rules/remove_unnecessary_calls_to_string_valueof/implementation.dl"
#include "rules/remove_unnecessary_declarations_above_return_statements/implementation.dl"
#include "rules/remove_unnecessary_map/implementation.dl"
#include "rules/remove_unnecessary_null_check_before_string_equals_comparison/implementation.dl"
#include "rules/remove_unnecessary_return/implementation.dl"
#include "rules/remove_unused_assignments/implementation.dl"
#include "rules/remove_unused_imports/implementation.dl"
#include "rules/remove_unused_local_variables/implementation.dl"
#include "rules/remove_use_of_fully_qualified_names/implementation.dl"
#include "rules/simplify_calls_to_collection_removeall/implementation.dl"
#include "rules/simplify_calls_to_constructor_for_string_conversion/implementation.dl"
#include "rules/simplify_calls_to_map_keyset/implementation.dl"
#include "rules/simplify_calls_to_string_substring/implementation.dl"
#include "rules/simplify_calls_to_substring_and_startswith/implementation.dl"
#include "rules/simplify_code_using_collection_isempty/implementation.dl"
#include "rules/simplify_code_using_map_computeifabsent/implementation.dl"
#include "rules/simplify_code_using_method_references/implementation.dl"
#include "rules/simplify_code_using_streams/implementation.dl"
#include "rules/simplify_lambdas_containing_a_block_with_only_one_statement/implementation.dl"
#include "rules/use_lambda_argument_in_map_computeifabsent/implementation.dl"
//#include "rules/simplify_code_using_lambda_expressions/implementation.dl"

#include "datalog/ast.dl"
#include "datalog/scoping.dl"
#include "datalog/typechecking.dl"
#include "datalog/sideeffects.dl"

/* Types
 ********************************/

.type id = [type: symbol, filename: symbol, content_from: number, content_to: number, from: number, to: number]
.type id_list = [head: id, tail: id_list]

.type type = [package: symbol, class: symbol, type_args: type_list]
.type type_list = [head: type, tail: type_list]

/* Functors
 ********************************/

.functor decrease_indentation(x: symbol):symbol stateful
.functor type_to_string(x: type):symbol stateful
.functor type_args_to_string(x: type_list):symbol stateful
.functor type_to_qualified_string(x: type):symbol stateful
.functor node_to_string(c: symbol, x: id):symbol stateful

/* AST nodes
 ********************************/

.decl root(id: id)
.input root

.decl ast_node(id: id)
ast_node(id) :- root(id).
ast_node(child) :-
    ast_node(ancestor),
    parent_of(ancestor, _, child).
ast_node(child) :-
    ast_node(ancestor),
    parent_of_list(ancestor, _, list),
    list_contains(list, child).

.decl filename_of(id: id, filename: symbol)
filename_of([name, fn, cA, cB, A, B], fn) :- ast_node([name, fn, cA, cB, A, B]).

.decl name_of(id: id, name: symbol)
name_of([name, fn, cA, cB, A, B], name) :- ast_node([name, fn, cA, cB, A, B]).

.decl starts_at(id: id, at: number)
starts_at([name, fn, cA, cB, A, B], A) :- ast_node([name, fn, cA, cB, A, B]).

.decl ends_at(id: id, at: number)
ends_at([name, fn, cA, cB, A, B], B) :- ast_node([name, fn, cA, cB, A, B]).

.decl content_starts_at(id: id, at: number)
content_starts_at([name, fn, cA, cB, A, B], cA) :- ast_node([name, fn, cA, cB, A, B]).

.decl content_ends_at(id: id, at: number)
content_ends_at([name, fn, cA, cB, A, B], cB) :- ast_node([name, fn, cA, cB, A, B]).

/* Javadoc
 ********************************/

.decl javadoc_references(filename: symbol, class: symbol)
.input javadoc_references

/* AST node relations
 ********************************/

.decl parent_of(parent: id, name: symbol, child: id)
.input parent_of

.decl parent_of_list(parent: id, name: symbol, children: id_list)
.input parent_of_list

.decl head_of(head: id, tail: id_list)
head_of(head, tail) :-
    parent_of_list(_, _, [head, tail]).
head_of(head, tail) :-
    head_of(_, [head, tail]).

/* is x at the position just before y in a list? */
.decl predecessor_of(x: id, y: id)
predecessor_of(x, y) :-
    head_of(x, [y, _]).

/* does the list contain the element? */
.decl list_contains(list: id_list, id: id)
list_contains([head,tail], head) :-
    parent_of_list(_, _, [head, tail]).
list_contains(list, b) :-
    list_contains(list, a),
    predecessor_of(a, b).

.decl list_last_element(list: id_list, id: id)
list_last_element(list, id) :-
    list_contains(list, id),
    head_of(id, nil).

.decl list_first_element(list: id_list, id: id)
list_first_element([head, tail], head) :-
    parent_of_list(_, _, [head, tail]).

/* Constant evaluation
 ********************************/

.decl evaluates_to_integer_value(id: id, value: number)
evaluates_to_integer_value(id, 0) :-
    integer_literal(id),
    content_starts_at(id, content_start),
    content_ends_at(id, content_end),
    source_code(_, code),
    substr(code, content_start, content_end - content_start) = "0".
evaluates_to_integer_value(id, 1) :-
    integer_literal(id),
    content_starts_at(id, content_start),
    content_ends_at(id, content_end),
    source_code(_, code),
    substr(code, content_start, content_end - content_start) = "1".
/* TODO
evaluates_to_integer_value(id, to_number(repr)) :-
    integer_literal(id),
    string_representation(id, repr).
*/
evaluates_to_integer_value(id, left_value + right_value) :-
    addition_expression(id, left, right),
    evaluates_to_integer_value(left, left_value),
    evaluates_to_integer_value(right, right_value).
evaluates_to_integer_value(id, left_value * right_value) :-
    multiplication_expression(id, left, right),
    evaluates_to_integer_value(left, left_value),
    evaluates_to_integer_value(right, right_value).
evaluates_to_integer_value(id, left_value - right_value) :-
    subtraction_expression(id, left, right),
    evaluates_to_integer_value(left, left_value),
    evaluates_to_integer_value(right, right_value).

.decl evaluates_to_boolean_value(id: id, value: number)
evaluates_to_boolean_value(id, 0) :-
    boolean_literal(id),
    content_starts_at(id, content_start),
    content_ends_at(id, content_end),
    source_code(_, code),
    substr(code, content_start, content_end - content_start) = "false".
evaluates_to_boolean_value(id, 1) :-
    boolean_literal(id),
    content_starts_at(id, content_start),
    content_ends_at(id, content_end),
    source_code(_, code),
    substr(code, content_start, content_end - content_start) = "true".
evaluates_to_boolean_value(id, left_value land right_value) :-
    conditional_and_expression(id, left, right),
    evaluates_to_boolean_value(left, left_value),
    evaluates_to_boolean_value(right, right_value).
evaluates_to_boolean_value(id, left_value lor right_value) :-
    conditional_or_expression(id, left, right),
    evaluates_to_boolean_value(left, left_value),
    evaluates_to_boolean_value(right, right_value).
evaluates_to_boolean_value(id, 1) :-
    equals_expression(id, left, right),
    evaluates_to_integer_value(left, x),
    evaluates_to_integer_value(right, x).
evaluates_to_boolean_value(id, 0) :-
    equals_expression(id, left, right),
    evaluates_to_integer_value(left, x),
    evaluates_to_integer_value(right, y),
    x != y.

/* String representation
 ********************************/

.decl source_code(filename: symbol, str: symbol)
.input source_code

/* Rewrite rules
 ********************************/

.decl replace_node_with_node(rule: symbol, original: id, replacement: id)
.decl replace_node_with_string(rule: symbol, original: id, replacement: symbol)

.decl rewrite(rule: symbol, filename: symbol, start: number, end: number, to: symbol)
rewrite(rule, filename, start, end, to) :-
    replace_node_with_string(rule, id, to),
    starts_at(id, start),
    ends_at(id, end),
    filename_of(id, filename).
rewrite(rule, filename, start, end, substr(code, replacement_start, replacement_end - replacement_start)) :-
    replace_node_with_node(rule, original, replacement),
    starts_at(original, start),
    ends_at(original, end),
    filename_of(original, filename),
    source_code(_, code),
    starts_at(replacement, replacement_start),
    ends_at(replacement, replacement_end).
.output rewrite(IO=stdout)
